<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">a dev's journal</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000/atom.xml"/>
  
  <link href="http://localhost:3000/"/>
  <id>http://localhost:3000/</id>
  <updated>2018-11-18T18:58:07Z</updated>
  <author>
    <name>Alex Salom</name>
    <email></email>
  </author>
  <rights type="text">Copyright © 2018 Alex Salom. All rights reserved.</rights>
  
  <entry>
  <title type="text">Localize strings more beautifully with an extension</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/2017/09/29/localize+strings+extension/" />
  <id>http://localhost:3000/2017/09/29/localize+strings+extension</id>
  <published>2017-09-29T00:00:00Z</published>
  <updated>2017-09-29T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>If you’ve worked in an App that has multiple languages you’d probably have learn to <del>hate</del> love Apple’s localization API <code class="highlighter-rouge">NSLocalizedString</code>. We just want a localize some strings but instead we are forced to provide a comment which in most cases we’ll just pass in <code class="highlighter-rouge">nil</code>.</p>

<blockquote>
  <p>Checkout the documentation <a href="https://developer.apple.com/documentation/foundation/nslocalizedstring">here</a>.</p>
</blockquote>

<p>I’ve been using for a while a small <code class="highlighter-rouge">String</code> extension to shorten the wording while keeping the API flexible for different scenarios. Let’s go straight to the point and show some <a href="https://gist.github.com/asalom/cfade69708bf300c479bea614f39bc41">snippets</a> with the implementation and usage.</p>

<h3 id="implementation">Implementation:</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="kd">public</span> <span class="kd">func</span> <span class="nf">localize</span><span class="p">(</span><span class="n">tableName</span> <span class="nv">tableName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kt">NSBundle</span> <span class="o">=</span> <span class="kt">NSBundle</span><span class="o">.</span><span class="nf">mainBundle</span><span class="p">(),</span> <span class="nv">comment</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">NSLocalizedString</span><span class="p">(</span>
      <span class="k">self</span><span class="p">,</span>
      <span class="nv">tableName</span><span class="p">:</span> <span class="n">tableName</span><span class="p">,</span>
      <span class="nv">bundle</span><span class="p">:</span> <span class="n">bundle</span><span class="p">,</span>
      <span class="nv">value</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span>
      <span class="nv">comment</span><span class="p">:</span> <span class="n">comment</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="usage">Usage:</h3>

<p>Basic:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"MENU"</span><span class="o">.</span><span class="nf">localize</span><span class="p">()</span>
<span class="s">"MENU"</span><span class="o">.</span><span class="nf">localize</span><span class="p">(</span><span class="nv">comment</span><span class="p">:</span> <span class="s">"Menu title"</span><span class="p">)</span>
</code></pre></div></div>

<p>Or if you have other <code class="highlighter-rouge">Localizable.strings</code> files:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"MENU"</span><span class="o">.</span><span class="nf">localize</span><span class="p">(</span><span class="nv">tableName</span><span class="p">:</span> <span class="s">"SomeOtherLocalizable"</span><span class="p">)</span>
</code></pre></div></div>

<p>Or if you are in a different target:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"MENU"</span><span class="o">.</span><span class="nf">localize</span><span class="p">(</span><span class="nv">tableName</span><span class="p">:</span> <span class="s">"SomeOtherLocalizableAndTarget"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kt">NSBundle</span><span class="p">(</span><span class="nv">forClass</span><span class="p">:</span> <span class="kt">DummyClass</span><span class="o">.</span><span class="k">self</span><span class="p">))</span>
<span class="o">...</span>
<span class="kd">private</span> <span class="kd">class</span> <span class="kt">DummyClass</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>In the last example I find it useful to just create another extension inside of the target were the <code class="highlighter-rouge">Localizable.strings</code> file is located.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">localizeTargetX</span><span class="p">(</span><span class="nv">comment</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">localize</span><span class="p">(</span><span class="nv">tableName</span><span class="p">:</span> <span class="s">"TargetXLocalizable"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kt">Bundle</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="kt">DummyClass</span><span class="o">.</span><span class="k">self</span><span class="p">),</span> <span class="nv">comment</span><span class="p">:</span> <span class="n">comment</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">class</span> <span class="kt">DummyClass</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
 ]]></content>
</entry>


  <entry>
  <title type="text">Dependency Injection with Service Locator</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/2017/03/03/dependency-injection-with-service-locator/" />
  <id>http://localhost:3000/2017/03/03/dependency-injection-with-service-locator</id>
  <published>2017-03-03T00:00:00Z</published>
  <updated>2017-03-03T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Here at <a href="http://welt.de">WeltN24</a>’s iOS team we like to test. We like it so much that we build our code to be <del>almost</del> 100% testable. We are able to achieve this by injecting all dependencies through each class’ initializer. One technic to do this is to make use of Swift’s default values.</p>
<blockquote>
  <p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html">The Swift Programming Language</a></p>

  <p>You can define a default value for any parameter in a function by assigning a value to the parameter after that parameter’s type. If a default value is defined, you can omit that parameter when calling the function.</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">hello</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Alex Salom"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s">"Hello </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
<span class="p">}</span>

<span class="nf">hello</span><span class="p">()</span> <span class="c1">// Hello Alex Salom</span>
<span class="nf">hello</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Nick Cave"</span><span class="p">)</span> <span class="c1">// Hello Nick Cave</span>
</code></pre></div></div>

<p>Let’s say that we have an object called <code class="highlighter-rouge">PeopleManager</code> who’s purpose is to, well, manage people. Let’s imagine that it can fetch people from the network and save people in a database. Since we like to follow the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>, we want these two functionalities to be encapsulated in different objects, <code class="highlighter-rouge">Fetcher</code> and <code class="highlighter-rouge">Database</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Database</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">save</span><span class="p">(</span><span class="nv">person</span><span class="p">:</span> <span class="kt">Person</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">DatabaseImpl</span><span class="p">:</span> <span class="kt">Database</span> <span class="p">{</span> <span class="o">...</span><span class="err"> </span><span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">Fetcher</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">fetch</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Person</span>
<span class="p">}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">FetcherImpl</span><span class="p">:</span> <span class="kt">Fetcher</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

</code></pre></div></div>

<p>Using Swift’s default values we could inject those dependencies into <code class="highlighter-rouge">PeopleManager</code> like this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">PeopleManager</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">database</span><span class="p">:</span> <span class="kt">Database</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">fetcher</span><span class="p">:</span> <span class="kt">Fetcher</span>

  <span class="nf">init</span><span class="p">(</span><span class="nv">database</span><span class="p">:</span> <span class="kt">Database</span> <span class="o">=</span> <span class="kt">DatabaseImpl</span><span class="p">(),</span> <span class="nv">fetcher</span><span class="p">:</span> <span class="kt">Fetcher</span> <span class="o">=</span> <span class="kt">FetcherImpl</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">database</span>
    <span class="k">self</span><span class="o">.</span><span class="n">fetcher</span> <span class="o">=</span> <span class="n">fetcher</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">person</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fetcher</span><span class="o">.</span><span class="nf">fetch</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">addPerson</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">person</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Alex Salom"</span><span class="p">)</span>
    <span class="n">database</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="nv">person</span><span class="p">:</span> <span class="n">person</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is very nice as it allows us to initialize <code class="highlighter-rouge">PeopleManager</code> through its empty initializer from the production code <code class="highlighter-rouge">PeopleManager()</code> but giving us the possibility to inject mocked versions of the dependencies from the tests <code class="highlighter-rouge">PeopleManager(database: DatabaseMock(), fetcher: FetcherMock())</code>.</p>

<p>However we did find one issue with this technic. When an object has quite a few dependencies, the initializer can get out of hands having long signatures. That’s why we came up with something called <code class="highlighter-rouge">ServiceLocator</code>. We can think of a <code class="highlighter-rouge">ServiceLocator</code> as a registry of dependencies for a given object. The idea is that each dependency will declare its own locator so other objects can find a way to initialize those dependencies. Let’s see an example with our <code class="highlighter-rouge">Database</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Database</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">DatabaseImpl</span><span class="p">:</span> <span class="kt">Database</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">DatabaseLocator</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">database</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Database</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">DatabaseLocator</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">database</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Database</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">DatabaseImpl</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We declared a protocol <code class="highlighter-rouge">DatabaseLocator</code> with a function that will provide us with an instance of <code class="highlighter-rouge">Database</code>. We also declared a protocol extension with a default implementation of that function. Now imagine we did the same for <code class="highlighter-rouge">Fetcher</code> and we now have a <code class="highlighter-rouge">FetcherLocator</code> as well as a <code class="highlighter-rouge">DatabaseLocator</code>. With those in place let’s revisit <code class="highlighter-rouge">PeopleManger</code>’s dependency injection.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">PeopleManager</span> <span class="p">{</span>
  <span class="kd">typealias</span> <span class="kt">ServiceLocator</span> <span class="o">=</span> <span class="kt">DatabaseLocator</span> <span class="o">&amp;</span> <span class="kt">FetcherLocator</span>
  <span class="kd">final</span> <span class="kd">class</span> <span class="kt">ServiceLocatorImpl</span><span class="p">:</span> <span class="kt">ServiceLocator</span> <span class="p">{}</span>

  <span class="kd">private</span> <span class="k">let</span> <span class="nv">database</span><span class="p">:</span> <span class="kt">Database</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">fetcher</span><span class="p">:</span> <span class="kt">Fetcher</span>

  <span class="nf">init</span><span class="p">(</span><span class="nv">serviceLocator</span><span class="p">:</span> <span class="kt">ServiceLocator</span> <span class="o">=</span> <span class="kt">ServiceLocatorImpl</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">serviceLocator</span><span class="o">.</span><span class="nf">database</span><span class="p">()</span>
    <span class="k">self</span><span class="o">.</span><span class="n">fetcher</span> <span class="o">=</span> <span class="n">serviceLocator</span><span class="o">.</span><span class="nf">fetcher</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">person</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fetcher</span><span class="o">.</span><span class="nf">fetch</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">addPerson</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">person</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Nick Cave"</span><span class="p">)</span>
    <span class="n">database</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="nv">person</span><span class="p">:</span> <span class="n">person</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We start by declaring a <code class="highlighter-rouge">typealias ServiceLocator</code> with all the dependencies of this class. This is very convenient because only by looking at this line we see all the objects <code class="highlighter-rouge">PeopleManager</code> depends on. We then inject the <code class="highlighter-rouge">ServiceLocator</code> into the initializer <code class="highlighter-rouge">init(serviceLocator: ServiceLocator = ServiceLocatorImpl())</code> using a default value of <code class="highlighter-rouge">ServiceLocatorImpl</code>.
<code class="highlighter-rouge">ServiceLocatorImpl</code> doesn’t need to provide any implementation because each one of the Locators have provided an extension to every method they declare. We just found a way to inject as many dependencies as we want by declaring only one variable at <code class="highlighter-rouge">PeopleManager</code>’s initializer. Since all the dependencies use protocols and the locators are protocols themselves we could now build our own version of ServiceLocator that returns mocked objects and inject those from the tests.</p>

<p>Schönes Wochenende!</p>

<p><a href="https://github.com/asalom/alexsalom.es/tree/master/_code/2017-03-03-dependency-injection-with-service-locator">Get the code here</a></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Swap out your App Delegate for testing</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/2016/03/10/swap-out-your-appdelegate-for-testing/" />
  <id>http://localhost:3000/2016/03/10/swap-out-your-appdelegate-for-testing</id>
  <published>2016-03-10T00:00:00Z</published>
  <updated>2016-03-10T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>The best thing about unit testing is the ability to know if our production code works as expected without having to tap around in the Simulator. It is crucial that we receive this feedback fast so we can run the test suite as much as possible. That is even more important when we are practicing <strong>TDD</strong>.</p>

<p>While running our tests, Xcode firstly launches the app in the simulator like if we were normally running it and thus having the site effect of executing any code we may have in our App Delegate and initial View Controller.</p>

<h3 id="faster-please">Faster, please</h3>
<p>One thing that can slow our tests down is if our App performs expensive tasks on startup and it is not unusual to place code that synchronizes with a server in our implementation of <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/">UIAppDelegate</a>.</p>

<p>Luckily for us there is a way to change the production App Delegate with a <em>fake</em> that does nothing.</p>

<h3 id="changing-the-app-delegate">Changing the App Delegate</h3>
<p>First head to your <strong>AppDelegate.swift</strong> file. You’ll notice that there is an attribute <code class="highlighter-rouge">@UIApplicationMain</code> which you’ll need to <strong>delete</strong>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@UIApplicationMain</span>
<span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
  <span class="c1">// Many expensive tasks</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<blockquote>
  <p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html">NSApplicationMain</a></p>

  <p>Apply this attribute to a class to indicate that it is the application delegate. Using this attribute is equivalent to calling the NSApplicationMain(::) function and passing this class’s name as the name of the delegate class.
If you do not use this attribute, supply a main.swift file with a main() function that calls the NSApplicationMain(::) function. For example, if your app uses a custom subclass of NSApplication as its principal class, call the NSApplicationMain function instead of using this attribute.</p>
</blockquote>

<p>Next step is to add a new file and name it <code class="highlighter-rouge">main.swift</code>. This will give us a way to inject our <em>fake</em>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">FakeAppDelegate</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">window</span><span class="p">:</span> <span class="kt">UIWindow</span><span class="p">?</span>

  <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
    <span class="n">didFinishLaunchingWithOptions</span> <span class="nv">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="kt">NSObject</span> <span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]?)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">window</span><span class="p">?</span><span class="o">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
    <span class="k">return</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">isRunningTests</span> <span class="o">=</span> <span class="kt">NSClassFromString</span><span class="p">(</span><span class="s">"XCTestCase"</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span>

<span class="k">if</span> <span class="n">isRunningTests</span> <span class="p">{</span>
  <span class="kt">UIApplicationMain</span><span class="p">(</span><span class="kt">Process</span><span class="o">.</span><span class="n">argc</span><span class="p">,</span> <span class="kt">Process</span><span class="o">.</span><span class="n">unsafeArgv</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="kt">NSStringFromClass</span><span class="p">(</span><span class="kt">FakeAppDelegate</span><span class="p">))</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="kt">UIApplicationMain</span><span class="p">(</span><span class="kt">Process</span><span class="o">.</span><span class="n">argc</span><span class="p">,</span> <span class="kt">Process</span><span class="o">.</span><span class="n">unsafeArgv</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="kt">NSStringFromClass</span><span class="p">(</span><span class="kt">AppDelegate</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<p>You may notice that not only we did inject a fake <em>App Delegate</em> but also have overrode <code class="highlighter-rouge">application: didFinishLaunchingWithOptions</code> setting an empty <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/">UIViewController</a> so we avoid too any expensive initialization tasks our real root View Controller may perform.</p>

<p>That’s all there is to it.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Who am I?</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/2016/03/06/who-am-i/" />
  <id>http://localhost:3000/2016/03/06/who-am-i</id>
  <published>2016-03-06T00:00:00Z</published>
  <updated>2016-03-06T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>My name is Alex Salom and I currently serve as an iOS Engineer at <strong>WeltN24 GmbH</strong> in Berlin, Germany.</p>

<p>This website has gone through many incarnations and the one you are seeing is the latest. Previously I went for complex CMSes in horrible and expensive hosting companies. That has changed.
What you are seeing now is the awesome <a href="https://jekyllrb.com/">Jekyll</a> with a modified theme called <a href="https://github.com/biomadeira/sustain">Sustain</a>.</p>

<blockquote>
  <p>Jekyll allows you to build blog aware static websites letting you focus on the content instead of the management.</p>
</blockquote>

<p>What should you expect from this site? Swift, iOS, tech stuff -books included-, code, maybe some music too… just the mumbles you would hear if you were working next to me.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Person</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">who</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"Alex Salom"</span>
  <span class="p">}</span>
  <span class="kd">func</span> <span class="nf">wo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"Berlin, Germany."</span>
  <span class="p">}</span>
  <span class="kd">func</span> <span class="nf">what</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="s">"code"</span><span class="p">,</span> <span class="s">"music"</span><span class="p">,</span> <span class="s">"ci"</span><span class="p">,</span> <span class="s">"ios"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="welcome">Welcome</h2>
 ]]></content>
</entry>



</feed>
